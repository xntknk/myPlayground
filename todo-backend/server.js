require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(express.json()); // à¹ƒà¸«à¹‰ Express à¸­à¹ˆà¸²à¸™ JSON à¹„à¸”à¹‰

// à¹€à¸Šà¸·à¹ˆà¸­à¸¡à¸•à¹ˆà¸­ MongoDB
mongoose.connect(process.env.MONGO_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => console.log("Connected to MongoDB"))
  .catch(err => console.log(err));

// à¸ªà¸£à¹‰à¸²à¸‡ Model à¸ªà¸³à¸«à¸£à¸±à¸š Task
const TaskSchema = new mongoose.Schema({
    text: String,
    completed: Boolean
});
const Task = mongoose.model("Task", TaskSchema);

// ðŸ“Œ API Routes
// âœ… GET - à¸”à¸¶à¸‡ Task à¸—à¸±à¹‰à¸‡à¸«à¸¡à¸”
app.get("/tasks", async (req, res) => {
    const tasks = await Task.find();
    res.json(tasks);
});

// âœ… POST - à¹€à¸žà¸´à¹ˆà¸¡ Task à¹ƒà¸«à¸¡à¹ˆ
app.post("/tasks", async (req, res) => {
    const newTask = new Task({ text: req.body.text, completed: false });
    await newTask.save();
    res.json(newTask);
});

// âœ… PUT - à¸­à¸±à¸›à¹€à¸”à¸• Task
app.put("/tasks/:id", async (req, res) => {
    const updatedTask = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updatedTask);
});

// âœ… DELETE - à¸¥à¸š Task
app.delete("/tasks/:id", async (req, res) => {
    await Task.findByIdAndDelete(req.params.id);
    res.json({ message: "Deleted" });
});

// à¹€à¸£à¸´à¹ˆà¸¡à¸£à¸±à¸™ Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
